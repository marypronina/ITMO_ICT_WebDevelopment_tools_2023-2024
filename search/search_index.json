{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041f\u0440\u043e\u043d\u0438\u043d\u0430 \u041c\u0430\u0440\u0438\u044f \u041a33392","text":"<p>\u041e\u0442\u0447\u0435\u0442\u044b \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c</p>"},{"location":"lab1/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 1","text":"<p>\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f FastAPI</p>"},{"location":"lab1/#_1","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u041d\u0430\u0443\u0447\u0438\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a.</p>"},{"location":"lab1/#_2","title":"\u041f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430 - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0435\u0431-\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043b\u044e\u0434\u044f\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438. \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u0438, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u043d\u0430\u0432\u044b\u043a\u0438, \u043e\u043f\u044b\u0442 \u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043a\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445.</p> <ul> <li> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u0438, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0435\u0431\u0435, \u0441\u0432\u043e\u0438\u0445 \u043d\u0430\u0432\u044b\u043a\u0430\u0445, \u043e\u043f\u044b\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f\u0445 \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c.</p> </li> <li> <p>\u041f\u043e\u0438\u0441\u043a \u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u043a\u043e\u043c\u0430\u043d\u0434 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0435\u0432, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043d\u0430\u0432\u044b\u043a\u0438, \u043e\u043f\u044b\u0442, \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u0438 \u0442.\u0434.</p> </li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u0438 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0438\u0445 \u0446\u0435\u043b\u0438, \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0438 \u0438\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432.</p> </li> <li> <p>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0441\u0440\u043e\u043a\u043e\u0432, \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447, \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430 \u0438 \u0442.\u0434.</p> </li> </ul>"},{"location":"lab1/auth/","title":"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f","text":"<p>\u0412 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u0437\u0430\u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c.</p> <p>\u041f\u0440\u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f JWT \u0442\u043e\u043a\u0435\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u0440\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445.</p>"},{"location":"lab1/auth/#_2","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0430\u0440\u043e\u043b\u044f:","text":"<pre><code>def hash_password(password: str) -&gt; bytes:\n    return bcrypt.hashpw(password.encode(), bcrypt.gensalt())\n\n\ndef verify_password(password: str, db_password: str) -&gt; bool:\n    return bcrypt.checkpw(password.encode(), db_password.encode())\n</code></pre>"},{"location":"lab1/auth/#jwt","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f JWT:","text":"<pre><code>def encode_token(email: str) -&gt; str:\n    payload = {\n        'exp': datetime.datetime.now() + datetime.timedelta(hours=12),\n        'iat': datetime.datetime.now(),\n        'sub': email\n    }\n    return jwt.encode(payload, secret_key, algorithm='HS256')\n\n\ndef decode_token(token: str) -&gt; int:\n    try:\n        payload = jwt.decode(token, secret_key, leeway=100000, algorithms=['HS256'])\n        return payload['sub']\n    except jwt.ExpiredSignatureError:\n        raise HTTPException(status_code=401, detail='Token expired')\n    except jwt.InvalidTokenError:\n        raise HTTPException(status_code=401, detail='Invalid token')\n</code></pre>"},{"location":"lab1/auth/#_3","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438","text":"<pre><code>@router.post(\"/registration\")\ndef registration(user: UserDefault, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": User}):\n    user.password = hash_password(user.password)\n    user = User.model_validate(user)\n    session.add(user)\n    session.commit()\n    session.refresh(user)\n    return {\"status\": 200, \"data\": user}\n</code></pre>"},{"location":"lab1/auth/#jwt_1","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 (\u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 JWT)","text":"<pre><code>@router.post(\"/login\")\ndef login(user: UserAuth, session=Depends(get_session)) -&gt; str:\n    query = select(User).where(User.email == user.email)\n    db_user = session.exec(query).scalar()\n    if not db_user:\n        raise HTTPException(status_code=401, detail='Invalid email')\n\n    if not verify_password(user.password, db_user.password):\n        raise HTTPException(status_code=401, detail='Invalid password')\n\n    token = encode_token(user.email)\n    return token\n</code></pre>"},{"location":"lab1/auth/#headers","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0443 (\u0442\u043e\u043a\u0435\u043d \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442\u0441\u044f \u0432 headers)","text":"<pre><code>@router.get(\"/user/token\", response_model=UserExtended)\ndef get_user_by_token(token: Optional[str] = Header(None), session=Depends(get_session)) -&gt; User:\n    token = str.replace(str(token), 'Bearer ', '')\n    if not token:\n        raise HTTPException(status_code=401, detail='Unauthorized')\n    user_email = decode_token(token)\n    query = select(User).where(User.email == user_email)\n    user = session.exec(query).scalar()\n    return user\n</code></pre>"},{"location":"lab1/auth/#_4","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f","text":"<pre><code>@router.patch(\"/user/{user_id}/password\", response_model=UserDefault)\ndef change_password(user_id: int, old_password: str, new_password: str, session=Depends(get_session)) -&gt; User:\n    user = session.get(User, user_id)\n    if not verify_password(old_password, user.password):\n        raise HTTPException(status_code=401, detail='Invalid password')\n\n    new_password_hashed = hash_password(new_password).decode()\n    setattr(user, 'password', new_password_hashed)\n    session.add(user)\n    session.commit()\n    session.refresh(user)\n    return user\n</code></pre>"},{"location":"lab1/db/","title":"\u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0412 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e 6 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446 \u0438 2 \u043b\u0438\u043d\u043a\u043e\u0432\u044b\u0435 \u0434\u043b\u044f many-to-many \u0441\u0432\u044f\u0437\u0435\u0439</p>"},{"location":"lab1/db/#_2","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u044b","text":"<ul> <li>User. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u043e\u0447\u0442\u0443, \u043f\u0430\u0440\u043e\u043b\u044c \u0438 \u0438\u043c\u044f. \u0422\u0430\u043a\u0436\u0435 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u043e\u043f\u044b\u0442, \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u0438 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u044b</li> <li>Skill.</li> <li>UserSkill. \u041b\u0438\u043d\u043a\u043e\u0432\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438 \u0441\u043a\u0438\u043b\u043b\u043e\u043c. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435 - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f.</li> <li>UserProject. \u041b\u0438\u0447\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</li> <li>Team. \u0425\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u0445, \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0443, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u044b.</li> <li>UserTeam. \u041b\u0438\u043d\u043a\u043e\u0432\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f: \u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435, \u0434\u0430\u0442\u0430 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435, \u0434\u0430\u0442\u0430 \u0432\u044b\u0445\u043e\u0434\u0430 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e).</li> <li>TeamProject. \u041f\u0440\u043e\u0435\u043a\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u044b.</li> <li>Task. \u0417\u0430\u0434\u0430\u0447\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.</li> </ul>"},{"location":"lab1/migrations/","title":"\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u0438. Alembic","text":"<p>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Alembic.</p> <p>SQLModel \u0431\u044b\u043b \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u0432 \u0444\u0430\u0439\u043b <code>script.py.mako</code></p> <p>\u0414\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0443\u0442\u0438 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 <code>.env</code> \u0432 \u0444\u0430\u0439\u043b\u0435 <code>env.py</code> \u0431\u044b\u043b \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0435\u043d \u044d\u0442\u043e\u0442 \u043f\u0443\u0442\u044c:</p> <pre><code>import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n\nconfig.set_main_option(\"sqlalchemy.url\", os.getenv('DB_ADMIN'))\n</code></pre> <p>\u0414\u0430\u043b\u0435\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441 \u043f\u0443\u0442\u0435\u043c \u0431\u044b\u043b\u0430 \u043f\u043e\u0434\u0442\u044f\u043d\u0443\u0442\u0430 \u0432 \u0444\u0430\u0439\u043b\u0435 <code>alembic.ini</code>: <pre><code>sqlalchemy.url = %(DB_ADMIN)s\n</code></pre></p>"},{"location":"lab1/practices/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u041a\u043e\u043c\u043c\u0438\u0442 \u0441 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u043e\u0439 \u21161</p> <p>\u041a\u043e\u043c\u043c\u0438\u0442 \u0441 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u043e\u0439 \u21162</p> <p>\u041a\u043e\u043c\u043c\u0438\u0442 \u0441 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u043e\u0439 \u21163</p>"},{"location":"lab1/skill/","title":"\u0421\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u043a\u0438\u043b\u043b\u0430\u043c\u0438","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom typing_extensions import TypedDict, List\nfrom sqlmodel import select\n\nimport sys\nsys.path.append(\"../..\")\n\nfrom lab1.TeamTinder.connection import get_session\nfrom lab1.TeamTinder.models import *\n\n\nrouter = APIRouter()\n\n\n@router.post(\"/skill\")\ndef skill_create(skill: SkillDefault, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": Skill}):\n    skill = Skill.model_validate(skill)\n    session.add(skill)\n    session.commit()\n    session.refresh(skill)\n    return {\"status\": 200, \"data\": skill}\n\n\n@router.get(\"/skill/list\", response_model=List[SkillExtended])\ndef skill_list(session=Depends(get_session)) -&gt; List[Skill]:\n    return session.exec(select(Skill)).all()\n\n\n@router.get(\"/skill/{skill_id}\", response_model=SkillExtended)\ndef skill_read(skill_id: int, session=Depends(get_session)) -&gt; Skill:\n    return session.get(Skill, skill_id)\n</code></pre>"},{"location":"lab1/task/","title":"\u0421\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom typing_extensions import TypedDict\nfrom sqlmodel import select\n\nimport sys\nsys.path.append(\"../..\")\n\nfrom lab1.TeamTinder.connection import get_session\nfrom lab1.TeamTinder.models import *\n\n\nrouter = APIRouter()\n\n\n@router.post(\"/task\")\ndef task(task: TaskDefault, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": Task}):\n    task = Task.model_validate(task)\n    session.add(task)\n    session.commit()\n    session.refresh(task)\n    return {\"status\": 200, \"data\": task}\n\n\n@router.get(\"/task/list\", response_model=List[TaskExtended])\ndef teask_list(session=Depends(get_session)) -&gt; List[Task]:\n    return session.exec(select(Task)).all()\n\n\n@router.get(\"/task/{task_id}\", response_model=TaskExtended)\ndef task_read(task_id: int, session=Depends(get_session)) -&gt; Task:\n    return session.get(Task, task_id)\n\n\n@router.patch(\"/task/{task_id}\")\ndef task_update(task_id: int, task: TaskPartialUpdate, session=Depends(get_session)) -&gt; Task:\n    db_task = session.get(Task, task_id)\n    if not db_task:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n\n    task_data = task.model_dump(exclude_unset=True)\n    for key, value in task_data.items():\n        setattr(db_task, key, value)\n    session.add(db_task)\n    session.commit()\n    session.refresh(db_task)\n    return db_task\n\n\n@router.delete(\"/task/{task_id}\")\ndef task_delete(task_id: int, session=Depends(get_session)):\n    task = session.get(TeamProject, task_id)\n    if not task:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n    session.delete(task)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"lab1/team/","title":"\u0421\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom typing_extensions import TypedDict\nfrom sqlmodel import select\n\nimport sys\nsys.path.append(\"../..\")\n\nfrom lab1.TeamTinder.connection import get_session\nfrom lab1.TeamTinder.models import *\n\n\nrouter = APIRouter()\n\n\n@router.post(\"/team\")\ndef team_create(team: TeamDefault, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": Team}):\n    team = Team.model_validate(team)\n    session.add(team)\n    session.commit()\n    session.refresh(team)\n    return {\"status\": 200, \"data\": team}\n\n\n@router.get(\"/team/list\", response_model=List[TeamExtended])\ndef team_list(session=Depends(get_session)) -&gt; List[Team]:\n    return session.exec(select(Team)).all()\n\n\n@router.get(\"/team/{team_id}\", response_model=TeamExtended)\ndef team_read(team_id: int, session=Depends(get_session)) -&gt; Team:\n    return session.get(Team, team_id)\n\n\n@router.patch(\"/team/{team_id}\", response_model=TeamExtended)\ndef team_update(team_id: int, team: TeamPartialUpdate, session=Depends(get_session)) -&gt; Team:\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@router.delete(\"/team/{team_id}\")\ndef team_delete(team_id: int, session=Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"lab1/teamproject/","title":"\u0421\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u043a\u043e\u043c\u0430\u043d\u0434","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom typing_extensions import TypedDict\nfrom sqlmodel import select\n\nimport sys\nsys.path.append(\"../..\")\n\nfrom lab1.TeamTinder.connection import get_session\nfrom lab1.TeamTinder.models import *\n\n\nrouter = APIRouter()\n\n\n@router.post(\"/team_project\")\ndef team_project_create(team_project: TeamProjectDefault, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": TeamProject}):\n    team_project = TeamProject.model_validate(team_project)\n    session.add(team_project)\n    session.commit()\n    session.refresh(team_project)\n    return {\"status\": 200, \"data\": team_project}\n\n\n@router.get(\"/team_project/list\", response_model=List[TeamProjectExtended])\ndef team_project_list(session=Depends(get_session)) -&gt; List[TeamProject]:\n    return session.exec(select(TeamProject)).all()\n\n\n@router.get(\"/team_project/{team_project_id}\", response_model=TeamProjectExtended)\ndef team_project_read(team_project_id: int, session=Depends(get_session)) -&gt; TeamProject:\n    return session.get(TeamProject, team_project_id)\n\n\n@router.patch(\"/team_project/{team_project_id}\")\ndef team_project_update(team_project_id: int, team_project: TeamProjectPartialUpdate, session=Depends(get_session)) -&gt; TeamProject:\n    db_team_project = session.get(TeamProject, team_project_id)\n    if not db_team_project:\n        raise HTTPException(status_code=404, detail=\"Team Project not found\")\n\n    team_project_data = team_project.model_dump(exclude_unset=True)\n    for key, value in team_project_data.items():\n        setattr(db_team_project, key, value)\n    session.add(db_team_project)\n    session.commit()\n    session.refresh(db_team_project)\n    return db_team_project\n\n\n@router.delete(\"/team_project/{team_project_id}\")\ndef team_project_delete(team_project_id: int, session=Depends(get_session)):\n    team_project = session.get(TeamProject, team_project_id)\n    if not team_project:\n        raise HTTPException(status_code=404, detail=\"Team Project not found\")\n    session.delete(team_project)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"lab1/user/","title":"\u0421\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom typing_extensions import TypedDict\nfrom sqlmodel import select\n\nimport sys\nsys.path.append(\"../..\")\n\nfrom lab1.TeamTinder.connection import get_session\nfrom lab1.TeamTinder.models import *\n\n\nrouter = APIRouter()\n\n\n@router.get(\"/user/list\", response_model=List[UserExtended])\ndef user_list(session=Depends(get_session)) -&gt; List[User]:\n    return session.exec(select(User)).all()\n\n\n@router.get(\"/user/{user_id}\", response_model=UserExtended)\ndef user_read(user_id: int, session=Depends(get_session)) -&gt; User:\n    return session.get(User, user_id)\n\n\n@router.get(\"/user/{user_id}/skills\", response_model=List[Skill])\ndef get_user_skills(user_id: int, session=Depends(get_session)) -&gt; List[Skill]:\n    user = session.get(User, user_id)\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return user.skills\n\n\n@router.patch(\"/user/{user_id}\", response_model=UserExtended)\ndef user_update(user_id: int, user: UserPartialUpdate, session=Depends(get_session)) -&gt; User:\n    db_user = session.get(User, user_id)\n    if not db_user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    user_data = user.model_dump(exclude_unset=True)\n    for key, value in user_data.items():\n        setattr(db_user, key, value)\n    session.add(db_user)\n    session.commit()\n    session.refresh(db_user)\n    return db_user\n\n\n@router.delete(\"/user/{user_id}\")\ndef user_delete(user_id: int, session=Depends(get_session)):\n    user = session.get(User, user_id)\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    session.delete(user)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"lab1/userproject/","title":"\u0421\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom typing_extensions import TypedDict\nfrom sqlmodel import select\n\nimport sys\nsys.path.append(\"../..\")\n\nfrom lab1.TeamTinder.connection import get_session\nfrom lab1.TeamTinder.models import *\n\n\nrouter = APIRouter()\n\n\n@router.post(\"/user_project\")\ndef user_project_create(user_project: UserProjectDefault, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": UserProject}):\n    user_project = UserProject.model_validate(user_project)\n    session.add(user_project)\n    session.commit()\n    session.refresh(user_project)\n    return {\"status\": 200, \"data\": user_project}\n\n\n@router.get(\"/user_project/list\", response_model=List[UserProjectExtended])\ndef user_project_list(session=Depends(get_session)) -&gt; List[UserProject]:\n    return session.exec(select(UserProject)).all()\n\n\n@router.get(\"/user_project/{user_project_id}\", response_model=UserProjectExtended)\ndef user_project_read(user_project_id: int, session=Depends(get_session)) -&gt; UserProject:\n    return session.get(UserProject, user_project_id)\n\n\n@router.get(\"/user_project/list/user/{user_id}\", response_model=List[UserProjectExtended])\ndef get_user_user_project(user_id: int, session=Depends(get_session)) -&gt; List[UserProject]:\n    query = select(UserProject).where(UserProject.user_id == user_id)\n    user_projects = session.exec(query).all()\n    if not user_projects:\n        raise HTTPException(status_code=404, detail=\"User has no projects\")\n\n    return user_projects\n\n\n@router.patch(\"/user_project/{user_project_id}\")\ndef user_project_update(user_project_id: int, user_project: UserProjectPartialUpdate, session=Depends(get_session)) -&gt; UserProject:\n    db_user_project = session.get(UserProject, user_project_id)\n    if not db_user_project:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    user_project_data = user_project.model_dump(exclude_unset=True)\n    for key, value in user_project_data.items():\n        setattr(db_user_project, key, value)\n    session.add(db_user_project)\n    session.commit()\n    session.refresh(db_user_project)\n    return db_user_project\n\n\n@router.delete(\"/user_project/{user_project_id}\")\ndef user_project_delete(user_project_id: int, session=Depends(get_session)):\n    user_project = session.get(UserProject, user_project_id)\n    if not user_project:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    session.delete(user_project)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"lab1/userskill/","title":"\u0421\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u043a\u0438\u043b\u043b\u0430\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom typing_extensions import TypedDict\nfrom sqlmodel import select\n\nimport sys\nsys.path.append(\"../..\")\n\nfrom lab1.TeamTinder.connection import get_session\nfrom lab1.TeamTinder.models import *\n\n\nrouter = APIRouter()\n\n\n@router.post(\"/user_skill\")\ndef user_skill_create(user_skill: SkillUserLink, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": SkillUserLink}):\n    user_skill = SkillUserLink.model_validate(user_skill)\n    session.add(user_skill)\n    session.commit()\n    session.refresh(user_skill)\n    return {\"status\": 200, \"data\": user_skill}\n\n\n@router.get(\"/user_skill/list\")\ndef user_skill_list(session=Depends(get_session)) -&gt; List[SkillUserLink]:\n    return session.exec(select(SkillUserLink)).all()\n\n\n@router.get(\"/user_skill/{user_id}/{skill_id}\")\ndef user_skill_read(user_id: int, skill_id: int, session=Depends(get_session)) -&gt; SkillUserLink:\n    query = select(SkillUserLink).where(SkillUserLink.user_id == user_id, SkillUserLink.skill_id == skill_id)\n    result = session.exec(query)\n    user_skill = result.one_or_none()\n    if user_skill is None:\n        raise HTTPException(status_code=404, detail=\"UserSkill not found\")\n    return user_skill\n\n\n@router.patch(\"/user_skill/{user_id}/{skill_id}\")\ndef user_skill_update(user_id: int, skill_id: int, user_skill: SkillUserLink, session=Depends(get_session)) -&gt; SkillUserLink:\n    query = select(SkillUserLink).where(SkillUserLink.user_id == user_id, SkillUserLink.skill_id == skill_id)\n    result = session.exec(query)\n    db_user_skill = result.one_or_none()\n    if not db_user_skill:\n        raise HTTPException(status_code=404, detail=\"UserSkill not found\")\n\n    user_skill_data = user_skill.model_dump(exclude_unset=True)\n    for key, value in user_skill_data.items():\n        setattr(db_user_skill, key, value)\n\n    session.add(db_user_skill)\n    session.commit()\n    session.refresh(db_user_skill)\n    return db_user_skill\n\n\n@router.delete(\"/user_skill/{user_id}/{skill_id}\")\ndef user_skill_delete(user_id: int, skill_id: int, session=Depends(get_session)):\n    query = select(SkillUserLink).where(SkillUserLink.user_id == user_id, SkillUserLink.skill_id == skill_id)\n    result = session.exec(query)\n    user_skill = result.one_or_none()\n    if not user_skill:\n        raise HTTPException(status_code=404, detail=\"UserSkill not found\")\n\n    session.delete(user_skill)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"lab1/userteam/","title":"\u0421\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom typing_extensions import TypedDict\nfrom sqlmodel import select\n\nimport sys\nsys.path.append(\"../..\")\n\nfrom lab1.TeamTinder.connection import get_session\nfrom lab1.TeamTinder.models import *\n\n\nrouter = APIRouter()\n\n\n@router.post(\"/user_team\")\ndef user_team_create(user_team: TeamUserLink, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": TeamUserLink}):\n    user_team = TeamUserLink.model_validate(user_team)\n    session.add(user_team)\n    session.commit()\n    session.refresh(user_team)\n    return {\"status\": 200, \"data\": user_team}\n\n\n@router.get(\"/user_team/list\")\ndef user_team_list(session=Depends(get_session)) -&gt; List[TeamUserLink]:\n    return session.exec(select(TeamUserLink)).all()\n\n\n@router.get(\"/user_team/{user_id}/{team_id}\")\ndef user_team_read(user_id: int, team_id: int, session=Depends(get_session)) -&gt; TeamUserLink:\n    query = select(TeamUserLink).where(TeamUserLink.user_id == user_id, TeamUserLink.team_id == team_id)\n    result = session.exec(query)\n    user_team = result.one_or_none()\n    if user_team is None:\n        raise HTTPException(status_code=404, detail=\"UserTeam not found\")\n    return user_team\n\n\n@router.patch(\"/user_team/{user_id}/{team_id}\")\ndef user_team_update(user_id: int, team_id: int, user_team: TeamUserLinkPartialUpdate, session=Depends(get_session)) -&gt; TeamUserLink:\n    query = select(TeamUserLink).where(TeamUserLink.user_id == user_id, TeamUserLink.team_id == team_id)\n    result = session.exec(query)\n    db_user_team = result.one_or_none()\n    if not db_user_team:\n        raise HTTPException(status_code=404, detail=\"UserTeam not found\")\n\n    user_team_data = user_team.model_dump(exclude_unset=True)\n    for key, value in user_team_data.items():\n        setattr(db_user_team, key, value)\n\n    session.add(db_user_team)\n    session.commit()\n    session.refresh(db_user_team)\n    return db_user_team\n\n\n@router.delete(\"/user_team/{user_id}/{team_id}\")\ndef user_team_delete(user_id: int, team_id: int, session=Depends(get_session)):\n    query = select(TeamUserLink).where(TeamUserLink.user_id == user_id, TeamUserLink.team_id == team_id)\n    result = session.exec(query)\n    user_team = result.one_or_none()\n    if not user_team:\n        raise HTTPException(status_code=404, detail=\"UserTeam not found\")\n\n    session.delete(user_team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"lab2/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 2","text":"<p>\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21162. \u041f\u043e\u0442\u043e\u043a\u0438. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c.</p>"},{"location":"lab2/#_1","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u041f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python.</p>"},{"location":"lab2/task1/","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p>"},{"location":"lab2/task1/#_1","title":"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0430\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c","text":"<pre><code>import threading\nimport time\n\n\ndef calculate_sum(start_num, end_num, result):\n    res = sum(range(start_num, end_num))\n    result.append(res)\n\n\ndef main():\n    n = 5\n    total = 1000000\n    chunk_size = total // n\n    threads = list()\n    result = list()\n\n    for i in range(n):\n        start_num = i * chunk_size + 1\n        end_num = (i + 1) * chunk_size + 1\n        thread = threading.Thread(target=calculate_sum, args=(start_num, end_num, result))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    return sum(result)\n\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    total_sum = main()\n    result_time = time.time() - start_time\n    print(f'Sum: {total_sum} \\nTime: {result_time}')\n</code></pre>"},{"location":"lab2/task1/#_2","title":"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0430\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u044c","text":"<pre><code>import multiprocessing\nimport time\n\n\ndef calculate_sum(start_num, end_num, queue):\n    res = sum(range(start_num, end_num))\n    queue.put(res)\n\n\ndef main():\n    n = 5\n    total = 1000000\n    chunk_size = total // n\n    processes = list()\n    queue = multiprocessing.Queue()\n\n    for i in range(n):\n        start_num = i * chunk_size + 1\n        end_num = (i + 1) * chunk_size + 1\n        process = multiprocessing.Process(target=calculate_sum, args=(start_num, end_num, queue))\n        processes.append(process)\n        process.start()\n\n    for process in processes:\n        process.join()\n\n    res = 0\n    while not queue.empty():\n        res += queue.get()\n\n    return res\n\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    total_sum = main()\n    result_time = time.time() - start_time\n    print(f'Sum: {total_sum} \\nTime: {result_time}')\n</code></pre>"},{"location":"lab2/task1/#_3","title":"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0430\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c","text":"<pre><code>import asyncio\nimport time\n\n\nasync def calculate_sum(start_num, end_num):\n    return sum(range(start_num, end_num))\n\n\nasync def main():\n    n = 5\n    total = 1000000\n    chunk_size = total // n\n    tasks = list()\n\n    for i in range(n):\n        start_num = i * chunk_size + 1\n        end_num = (i + 1) * chunk_size + 1\n        task = asyncio.create_task(calculate_sum(start_num, end_num))\n        tasks.append(task)\n\n    result = await asyncio.gather(*tasks)\n\n    return sum(result)\n\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    total_sum = asyncio.run(main())\n    result_time = time.time() - start_time\n    print(f'Sum: {total_sum} \\nTime: {result_time}')\n</code></pre>"},{"location":"lab2/task1/#_4","title":"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e","text":"<pre><code>import threading\nimport time\n\n\ndef calculate_sum(start_num, end_num, result):\n    res = sum(range(start_num, end_num))\n    result.append(res)\n\n\ndef main():\n    n = 5\n    total = 1000000\n    chunk_size = total // n\n    result = list()\n\n    for i in range(n):\n        start_num = i * chunk_size + 1\n        end_num = (i + 1) * chunk_size + 1\n        calculate_sum(start_num, end_num, result)\n\n    return sum(result)\n\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    total_sum = main()\n    result_time = time.time() - start_time\n    print(f'Sum: {total_sum} \\nTime: {result_time}')\n</code></pre>"},{"location":"lab2/task1/#_5","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432","text":""},{"location":"lab2/task1/#_6","title":"\u0412\u044b\u0432\u043e\u0434\u044b","text":"<p>\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0431\u044b\u043b\u0438 \u043d\u0435 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0438\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438, \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0438, \u0432 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438, \u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u0438 \u043d\u0435 \u0434\u0430\u043b\u043e \u0432\u044b\u0438\u0433\u0440\u044b\u0448\u0430 \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u0412\u0441\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 \u0434\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439, \u0442\u0430\u043a \u043a\u0430\u043a \u043b\u0438\u0448\u044c \u0437\u0430\u0431\u0438\u0440\u0430\u043b\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u043d\u0430 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438.</p>"},{"location":"lab2/task2/","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"lab2/task2/#_1","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430","text":"<pre><code>def get_github_user_info(username):\n    url = f'https://github.com/{username}'\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        soup = BeautifulSoup(response.text, 'html.parser')\n\n        name_tag = soup.find('span', {'itemprop': 'name'})\n        name = name_tag.get_text(strip=True)\n\n        bio_tag = soup.find('div', {'class': 'p-note user-profile-bio mb-3 js-user-profile-bio f4'})\n        bio = '\u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e'\n        if bio_tag:\n            bio = bio_tag.get_text(strip=True)\n\n        pinned_repos = soup.find_all('span', {'class': 'repo'})\n        repo_info = []\n        unique_languages = set()\n\n        for repo in pinned_repos:\n            repo_name = repo.get_text(strip=True)\n\n            repo_url = f\"https://github.com/{username}/{repo_name}\"\n            repo_response = requests.get(repo_url)\n\n            if repo_response.status_code == 200:\n                repo_soup = BeautifulSoup(repo_response.text, 'html.parser')\n\n                language_tag = repo_soup.find('span', {'class': 'color-fg-default text-bold mr-1'})\n                language = '\u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e'\n                if language_tag:\n                    language = language_tag.get_text(strip=True)\n                unique_languages.add(language)\n\n                about_tag = repo_soup.find('p', {'class': 'f4 my-3'})\n                about = '\u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e'\n                if about_tag:\n                    about = about_tag.get_text(strip=True)\n\n                repo_info.append({\n                    'repo_name': repo_name,\n                    'about': about,\n                    'language': language\n                })\n\n        return {\n            'name': name,\n            'bio': bio,\n            'unique_languages': list(unique_languages),\n            'pinned_repos': repo_info\n        }\n    else:\n        return None\n</code></pre>"},{"location":"lab2/task2/#_2","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0435\u0440\u0430","text":"<pre><code>async def get_soup(url) -&gt; BeautifulSoup:\n    async with aiohttp.ClientSession() as client:\n        async with client.get(url) as response:\n            return BeautifulSoup(await response.read(), \"html.parser\")\n\n\nasync def get_github_user_info(username):\n    url = f'https://github.com/{username}'\n    # if username == \"berohomepc\":\n    #     await asyncio.sleep(2)\n\n    start_time = time.time()\n    soup = await get_soup(url)\n    result_time = time.time() - start_time\n    # print(f\"Parsing {username} took {result_time} seconds\\n\")\n\n    name_tag = soup.find('span', {'itemprop': 'name'})\n    name = name_tag.get_text(strip=True)\n\n    bio_tag = soup.find('div', {'class': 'p-note user-profile-bio mb-3 js-user-profile-bio f4'})\n    bio = '\u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e'\n    if bio_tag:\n        bio = bio_tag.get_text(strip=True)\n\n    pinned_repos = soup.find_all('span', {'class': 'repo'})\n    repo_info = []\n    unique_languages = set()\n\n    for repo in pinned_repos:\n        repo_name = repo.get_text(strip=True)\n\n        repo_url = f'https://github.com/{username}/{repo_name}'\n        repo_soup = await(get_soup(repo_url))\n\n        language_tag = repo_soup.find('span', {'class': 'color-fg-default text-bold mr-1'})\n        language = '\u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e'\n        if language_tag:\n            language = language_tag.get_text(strip=True)\n        unique_languages.add(language)\n\n        about_tag = repo_soup.find('p', {'class': 'f4 my-3'})\n        about = '\u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e'\n        if about_tag:\n            about = about_tag.get_text(strip=True)\n\n        repo_info.append({\n            'repo_name': repo_name,\n            'about': about,\n            'language': language\n        })\n\n    return {\n        'name': name,\n        'bio': bio,\n        'unique_languages': list(unique_languages),\n        'pinned_repos': repo_info\n    }\n</code></pre>"},{"location":"lab2/task2/#_3","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438","text":""},{"location":"lab2/task2/#_4","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u0438","text":""},{"location":"lab2/task2/#_5","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438","text":""},{"location":"lab2/task2/#_6","title":"\u0412\u044b\u0432\u043e\u0434\u044b","text":"<p>\u0421\u0430\u043c\u043e\u0435 \u0431\u044b\u0441\u0442\u0440\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u043a \u0432\u0435\u0431 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c \u0438 \u0431\u0430\u0437\u0430\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u041f\u043e\u0447\u0442\u0438 \u0442\u043e \u0436\u0435 \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c. \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u044c \u0441\u043d\u043e\u0432\u0430 \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b\u0430 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u0438\u0437-\u0437\u0430 \u0447\u0435\u0433\u043e \u0441\u0438\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u0442 \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438.</p>"}]}